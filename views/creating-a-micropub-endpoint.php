
<pre>
### Verifying access tokens

Verifying access tokens is not actually part of this library, since the token was generated by your own server. You will need to verify tokens using whatever method you wish.

For example, your API endpoint to create new posts may wish to require a "post" scope, so you would need to verify that the access token is valid and also contains the needed scope value.

The example below illustrates how to verify the self-encoded token we created above.

```php
// Verifies an access token, returning the token on success, or responding with an HTTP 400 error on failure
function requireAccessToken($requiredScope=false) {

  if(array_key_exists('HTTP_AUTHORIZATION', $_SERVER) 
     && preg_match('/Bearer (.+)/', $_SERVER['HTTP_AUTHORIZATION'], $match)) {

    // Decode the token using the encryption key
    $token = JWT::decode($match[1], $encryptionKey);

    if($token) {
      // This is where you could add additional validations on specific client_ids. For example
      // to revoke all tokens generated by app 'http://example.com', do something like this:
      // if($token->client_id == 'http://example.com' && strtotime($token->date) <= strtotime('2013-12-21')) // revoked

      // Verify the token has the required scope
      if($requiredScope) {
        if(property_exists($token, 'scope') && in_array($requiredScope, explode(' ', $token->scope))) {
          return $token;
        } else {
          header('HTTP/1.1 401 Unauthorized');
          header('Content-type: application/x-www-form-urlencoded');
          echo http_build_query(array(
            'error' => 'invalid_scope',
            'error_description' => 'The token provided does not have the necessary scope'
          ));
          die();
        }
      } else {
        return $token;
      }
    }
  }

  header('HTTP/1.1 401 Unauthorized');
  header('Content-type: application/x-www-form-urlencoded');
  echo http_build_query(array(
    'error' => 'unauthorized',
    'error_description' => 'An access token is required. Send an HTTP Authorization header such as \'Authorization: Bearer xxxxxx\''
  ));
  die();
}
```
</pre>

Then, use the requireAccessToken function:

<pre>
&lt;?php
$token = requireAccessToken('post');

$result = false;

if(post('content')) {

  if(post('published')) {
    $date = new DateTime(post('published'));
  } else {
    $date = new DateTime();
    $date->setTimeZone(new DateTimeZone('America/Los_Angeles'));
  }

  $page = Page::newPage('notes', $date);
  $page->set('client_id', $token->client_id);

  if(post('category'))
    $page->set('tags', explode(',', post('category')));

  $page->body = post('content');

  $page->save();

  $result = array(
    'url' => $page->fullURL
  );
}

if($result) {
  header('HTTP/1.1 201 Created');
  header('Location: ' . $result['url']);
} else {
  header('HTTP/1.1 400 Bad Request');
  echo 'Missing input. No post was created';
}
?&gt;
</pre>


